<?php

require_once dirname(__FILE__) . '/../../include/class.Phase.php';
require_once dirname(__FILE__) . '/../../include/initfunctions.php';
require_once dirname(__FILE__) . '/../../include/class.mylog.php';
require_once dirname(__FILE__) . '/../../include/class.Status.php';


$_SESSION = array();
$_SESSION['userid'] = '1';
$_SESSION['username'] = 'unit_test_name';
/**
 * Test class for Phase.
 * Generated by PHPUnit on 2012-02-20 at 22:50:59.
 */
class PhaseTest extends PHPUnit_Framework_TestCase {

  /**
   * @var Phase
   */
  protected $object;
  protected $conn;
  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new Phase;
    $db_host = "127.0.0.1";
    $db_user = "db_jenkins_asia";
    $db_pass = "db_jenkins_asia";
    $db_name = "jenkins_asia";
    $this->conn = mysql_connect($db_host,$db_user,$db_pass);
    $this->db_check = mysql_select_db($db_name);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    mysql_close();
  }

  /**
   * @covers Phase::add
   * @todo Implement testAdd().
   */
  public function testAdd() {
    $status = Status::getId("phase", "not_start");
    $ret = $this->object->add("test phase", "test desc", 1, $status);
    $this->assertNotEmpty($ret);
  }

  /**
   * @covers Phase::update
   * @todo Implement testUpdate().
   */
  public function testUpdate() {
    $status = Status::getId("phase", "completed");
    $ret = $this->object->update(1,'updated comments',$status,1);
    $this->assertTrue($ret);
  }

  /**
   * @covers Phase::del
   * @todo Implement testDel().
   */
  public function testDel() {
    $ret = $this->object->del(1);
    $this->assertTrue($ret);
  }

  /**
   * @covers Phase::getPhasesByProjectId
   * @todo Implement testGetPhasesByProjectId().
   */
  public function testGetPhasesByProjectId() {
    $ret = $this->object->getPhasesByProjectId(1);
    $this->assertNotEmpty($ret);
  }

}

?>
