<?php

require_once dirname(__FILE__) . '/../../include/class.DeliverableItem.php';
require_once dirname(__FILE__) . '/../../include/initfunctions.php';
require_once dirname(__FILE__) . '/../../include/class.mylog.php';
require_once dirname(__FILE__) . '/../../include/class.Status.php';


$_SESSION = array();
$_SESSION['userid'] = '1';
$_SESSION['username'] = 'unit_test_name';

/**
 * Test class for DeliverableItem.
 * Generated by PHPUnit on 2012-02-19 at 16:06:50.
 */
class DeliverableItemTest extends PHPUnit_Framework_TestCase {

  /**
   * @var DeliverableItem
   */
  protected $object;
  protected $conn;


  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $db_host = "127.0.0.1";
    $db_user = "db_jenkins_asia";
    $db_pass = "db_jenkins_asia";
    $db_name = "jenkins_asia";
    $this->conn = mysql_connect($db_host,$db_user,$db_pass);
    $this->db_check = mysql_select_db($db_name);
    $this->object = new DeliverableItem;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    mysql_close();
    
  }

  /**
   * @covers DeliverableItem::add
   * @todo Implement testAdd().
   */
  public function testAdd() {
    $status = Status::getId("deliverable", "not_start");
    $startDate = date("Y-m-d H:i:s",strtotime("2012-02-01"));
    $endDate = date("Y-m-d H:i:s",strtotime("2012-9-1"));
    $ret = $this->object->add("test_deliverable_item", $status, $startDate, $endDate,1,1,"test deliverable desc");
    $this->assertNotEmpty($ret);
  }

  /**
   * @covers DeliverableItem::update
   * @todo Implement testUpdate().
   */
  public function testUpdate() {
    $status = Status::getId("deliverable", "not_start");
    $startDate = date("Y-m-d H:i:s",strtotime("2012-02-01"));
    $endDate = date("Y-m-d H:i:s",strtotime("2012-9-1"));
    // Remove the following lines when you implement this test.
    $ret = $this->object->update(1, "update name", $status, $startDate, $endDate, 1, "updated desc");
    $this->assertTrue($ret);
  }

  /**
   * @covers DeliverableItem::del
   * @todo Implement testDel().
   */
  public function testDel() {
    // Remove the following lines when you implement this test.
    $ret = $this->object->del(1);
    $this->assertTrue($ret);
  }

  /**
   * @covers DeliverableItem::getItem
   * @todo Implement testGetItem().
   */
  public function testGetItem() {
    // Remove the following lines when you implement this test.
    $ret = $this->object->getItem(2);
    $this->assertNotEmpty($ret);
  }

  /**
   * @covers DeliverableItem::getDeliverableItemsByPhaseId
   * @todo Implement testGetDeliverableItemsByPhaseId().
   */
  public function testGetDeliverableItemsByPhaseId() {
    // Remove the following lines when you implement this test.
    $ret = $this->object->getDeliverableItemsByPhaseId(1);
    $this->assertNotEmpty($ret);
  }

}

?>
